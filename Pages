import { useState, useEffect } from "react";
import { ethers } from "ethers";
import atm_abi from "../artifacts/contracts/Assessment.sol/Assessment.json";

export default function HomePage() {
  const [ethWallet, setEthWallet] = useState(undefined);
  const [account, setAccount] = useState(undefined);
  const [atm, setATM] = useState(undefined);
  const [balance, setBalance] = useState(undefined);
  const [cars, setCars] = useState([
    { id: 1, name: "Toyota Camry", price: 5000 },
    { id: 2, name: "Honda Civic", price: 4000 },
    { id: 3, name: "Ford Mustang", price: 10000 }
  ]);
  const [ownedCars, setOwnedCars] = useState([]);

  const contractAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
  const atmABI = atm_abi.abi;

  const getWallet = async () => {
    if (window.ethereum) {
      setEthWallet(window.ethereum);
    }

    if (ethWallet) {
      const account = await ethWallet.request({ method: "eth_accounts" });
      handleAccount(account);
    }
  };

  const handleAccount = (account) => {
    if (account) {
      console.log("Account connected: ", account);
      setAccount(account);
    } else {
      console.log("No account found");
    }
  };

  const connectAccount = async () => {
    if (!ethWallet) {
      alert("MetaMask wallet is required to connect");
      return;
    }

    const accounts = await ethWallet.request({ method: "eth_requestAccounts" });
    handleAccount(accounts);

    // once wallet is set we can get a reference to our deployed contract
    getATMContract();
  };

  const getATMContract = () => {
    const provider = new ethers.providers.Web3Provider(ethWallet);
    const signer = provider.getSigner();
    const atmContract = new ethers.Contract(contractAddress, atmABI, signer);

    setATM(atmContract);
  };

  const getBalance = async () => {
    if (atm) {
      setBalance((await atm.getBalance()).toNumber());
    }
  };

  const deposit = async () => {
    if (atm) {
      let tx = await atm.deposit(20000);
      await tx.wait();
      getBalance();
    }
  };

  const withdraw = async () => {
    if (atm) {
      let tx = await atm.withdraw(5000);
      await tx.wait();
      getBalance();
    }
  };

  const getAll = async () => {
    if (atm && balance !== undefined) {
      // Withdraw entire balance
      let tx = await atm.withdraw(balance);
      await tx.wait();
      getBalance();
    }
  };

  const buyCar = async (car) => {
    if (atm && balance !== undefined && balance >= car.price) {
      // Deduct car price from balance
      let tx = await atm.withdraw(car.price);
      await tx.wait();
      setBalance(balance - car.price);
      // Add the bought car to ownedCars list
      setOwnedCars([...ownedCars, car]);
    } else {
      alert("Insufficient balance to buy this car");
    }
  };

  const initUser = () => {
    // Check to see if user has Metamask
    if (!ethWallet) {
      return <p>Please install Metamask in order to use this ATM.</p>;
    }

    // Check to see if user is connected. If not, connect to their account
    if (!account) {
      return (
        <button className="connect-button" onClick={connectAccount}>
          Let' s proceed to IFE CarShop
        </button>
      );
    }

    if (balance == undefined) {
      getBalance();
    }

    return (
      <div>
        <p>Your Account: {account}</p>
        <p>Your Balance: {balance}</p>
        <h2>Cars Available:</h2>
        <ul>
          {cars.map((car) => (
            <li key={car.id}>
              {car.name} - {car.price} ETH
              <button className="buy-button" onClick={() => buyCar(car)}>
                Buy
              </button>
            </li>
          ))}
        </ul>
        <h2>Owned Cars:</h2>
        <ul>
          {ownedCars.map((car) => (
            <li key={car.id}>{car.name}</li>
          ))}
        </ul>
        <button className="deposit-button" onClick={deposit}>
          Deposit 20000 ETH
        </button>
        <button className="withdraw-button" onClick={withdraw}>
          Withdraw 5000 ETH
        </button>
        <button className="getall-button" onClick={getAll}>
          Get all the ETH
        </button>
      </div>
    );
  };

  useEffect(() => {
    getWallet();
  }, []);

  return (
    <main className="container">
      <header>
        <h1>Welcome IFE CarShop</h1>
      </header>
      {initUser()}
      <style jsx>{`
        .container {
          text-align: center;
          background-color:#95a7de;
          padding: 20px;
        }
        header {
          background-color: #3333;
          color: white;
          padding: 10px 0;
          margin-bottom: 20px;
        }
        button {
          margin: 5px;
          padding: 10px 20px;
          border: none;
          cursor: pointer;
        }
        .buy-button {
          background-color: #4caf50;
          color: white;
        }
        .deposit-button {
          background-color: #008CBA;
          color: white;
        }
        .withdraw-button {
          background-color: #fcec03;
          color: white;
        }
        .getall-button {
          background-color: #555555;
          color: white;
        }
        .connect-button {
          background-color: #555555;
          color: white;
          padding: 10px 30px;
        }
      `}</style>
    </main>
  );
}
